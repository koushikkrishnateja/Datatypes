DATA TYPE:
Variables hold values, and every value has a specific data type that defines the kind of information it holds. These data types are broadly categorized into two groups: Primitive Data Types and Non-Primitive Data Types.



1. Primitive Data Types
Primitive data types are the built-in data types provided by JavaScript. They represent single values and are not mutable. JavaScript supports the following primitive data types:

Number data type in JavaScript can be used to hold decimal values as well as values without decimals.

Example: Below is an example.
let x = 250;
    let y = 40.5;
    console.log("Value of x=" + x);
    console.log("Value of y=" + y);
1.2 String:
The string data type in JavaScript represents a sequence of characters that are surrounded by single or double quotes.

Example: Below is an example.
let str = 'Hello All';
let str1 = "Welcome to my new house";
console.log("Value of str=" + str);
console.log("Value of str1=" + str1);

 Undefined:
This means that a variable has been declared but has not been assigned a value, or it has been explicitly set to the value `undefined`.

Example: Below is an example.
let x;
console.log(x); // Outputs: undefined

Boolean:
The boolean data type can accept only two values i.e. true and false.

Example: Below is an example.
let x;
console.log(x); // Outputs: undefined

1.5 Null:
This data type can hold only one possible value that is null.

Example: Below is an example.
let x = null;
    console.log("Value of x=" + x);




2. Non-primitive Data Types
Non-primitive data types, also known as reference types, are objects and derived data types. They can store collections of values or more complex entities. The two key non-primitive data types in JavaScript are:

Below is a list of Non-primitive data types.

 Object:
An object in Javascript is an entity having properties and methods. Everything is an object in javascript.

How to create an object in javascript:

Using Constructor Function to define an object:
// Creating object with the name person
    let person = {
        firstName: "Luiza",
        lastName: "Shaikh",
    };

    // Print the value of object on console
    console.log(person.firstName 
        + "  " + person.lastName);

Array:
With the help of an array, we can store more than one element under a single name.

Ways to declare a single-dimensional array:
let a = new Array();
    let b = new Array(10);
    let d = new Array(1, 2, 3, "Hello");
    console.log("value of a=" + a);
    console.log("value of b" + b);
    console.log("value of d=" + d);